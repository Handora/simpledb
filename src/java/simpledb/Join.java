package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;
    private HashMap<Object, ArrayList<Tuple>> joinMap;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
     public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.joinMap = null;
     }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        child1.open();
        child2.open();
        if (p.getOperator() == Predicate.Op.EQUALS) {
            this.joinMap = new HashMap<>();
            while (child1.hasNext()) {
                Tuple x = child1.next();
                Field f = x.getField(p.getField1());
                if (f.getType() == Type.INT_TYPE) {
                    int value = ((IntField)f).getValue();
                    ArrayList<Tuple> arr = this.joinMap.get(value);
                    if (arr == null) {
                        arr = new ArrayList<>();
                        this.joinMap.put(value, arr);
                    }
                    arr.add(x);
                } else if (f.getType() == Type.STRING_TYPE) {
                    String value = ((StringField)f).getValue();
                    ArrayList<Tuple> arr = this.joinMap.get(value);
                    if (arr == null) {
                        arr = new ArrayList<>();
                        this.joinMap.put(value, arr);
                    }
                    arr.add(x);
                } else {
                    throw new DbException("No such Type");
                }
            }
            child1.close();
        }
        this.t1 = null;
        this.it2 = null;
    }

    public void close() {
        this.it2 = null;
        this.joinMap = null;
        t1 = null;
        if (p.getOperator() != Predicate.Op.EQUALS) {
            child1.close();
        }
        child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        close();
        open();
    }

    private Tuple t1;
    private Iterator<Tuple> it2;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // TODO:
        //   more graceful implementation

        // using hash join to deal with equality join
        if (p.getOperator() == Predicate.Op.EQUALS) {
            if (it2 != null && it2.hasNext()) {
                Tuple t2 = it2.next();
                Tuple res = new Tuple(getTupleDesc());
                for (int i=0; i<t2.getTupleDesc().numFields(); i++) {
                    res.setField(i, t2.getField(i));
                }
                for (int i=0; i<t1.getTupleDesc().numFields(); i++) {
                    res.setField(t2.getTupleDesc().numFields()+i, t1.getField(i));
                }

                return res;
            }

            while (child2.hasNext()) {
                t1 = child2.next();
                Field f = t1.getField(p.getField2());
                if (f.getType() == Type.INT_TYPE) {
                    ArrayList<Tuple> arr = this.joinMap.get(((IntField)f).getValue());
                    if (arr != null) {
                        it2 = arr.iterator();
                        if (it2.hasNext()) {
                            Tuple t2 = it2.next();
                            Tuple res = new Tuple(getTupleDesc());
                            for (int i=0; i<t2.getTupleDesc().numFields(); i++) {
                                res.setField(i, t2.getField(i));
                            }
                            for (int i=0; i<t1.getTupleDesc().numFields(); i++) {
                                res.setField(t2.getTupleDesc().numFields()+i, t1.getField(i));
                            }

                            return res;
                        }
                    }
                } else if (f.getType() == Type.STRING_TYPE) {
                    ArrayList<Tuple> arr = this.joinMap.get(((StringField)f).getValue());
                    if (arr != null) {
                        it2 = arr.iterator();
                        if (it2.hasNext()) {
                            Tuple t2 = it2.next();
                            Tuple res = new Tuple(getTupleDesc());
                            for (int i=0; i<t2.getTupleDesc().numFields(); i++) {
                                res.setField(i, t2.getField(i));
                            }
                            for (int i=0; i<t1.getTupleDesc().numFields(); i++) {
                                res.setField(t2.getTupleDesc().numFields()+i, t1.getField(i));
                            }

                            return res;
                        }
                    }
                } else {
                    throw new DbException("No such Type");
                }
            }
            return null;
        } else {
            if (t1 == null && !child1.hasNext()) {
                return null;
            }
            if (t1 == null) {
                t1 = child1.next();
            }
            while (child2.hasNext()) {
                Tuple t2 = child2.next();
                if (p.filter(t1, t2)) {
                    Tuple res = new Tuple(getTupleDesc());
                    for (int i=0; i<t1.getTupleDesc().numFields(); i++) {
                        res.setField(i, t1.getField(i));
                    }
                    for (int i=0; i<t2.getTupleDesc().numFields(); i++) {
                        res.setField(t1.getTupleDesc().numFields()+i, t2.getField(i));
                    }
                    return res;
                }
            }
            child2.rewind();
            t1 = null;
            return fetchNext();
        }
    }

    @Override
    public OpIterator[] getChildren() {
        OpIterator[] ops = new OpIterator[2];
        ops[0] = child1;
        ops[1] = child2;
        return ops;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        if (children.length < 2) {
            return;
        }
        child1 = children[0];
        child2 = children[1];
    }
}
